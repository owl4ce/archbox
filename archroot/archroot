#!/usr/bin/env bash
source /etc/archroot.conf

if [[ $VERBOSE_MSG = "yes" ]]; then
    Rvar="-Rv"
    Tvar="-vt"
    Lvar="-lv"
else
    Rvar="-R"
    Tvar="-t"
    Lvar="-l"
fi

if [[ $EUID -ne 0 ]]; then
    mount="$PRIV mount"
    umount="$PRIV umount"
else
    mount="mount"
    umount="umount"
fi

R="\e[1;31m"; G="\e[1;32m"; M="\e[1;35m"; W="\e[1;37m"; NC="\e[1;0m"

checkdep() { command -v "$1" > /dev/null 2>&1 || err "${M}$1${W} is not installed. Please install it first!${NC}"; }
asroot() { [[ $EUID -ne 0 ]] && err "Run this as root!"; }
copyresolv() { $PRIV $INSTALL_PATH/copyresolv; }
err() { echo -e "${R}==> Error:${W} $@${NC}"; exit 1; }
msg() { echo -e "${G}==>${W} $@${NC}"; }
rd_msg() { echo -e "${R}==> Chroot API filesystems:${W} $@${NC}"; }
gr_msg() { echo -e "${G}==> Chroot API filesystems:${W} $@${NC}"; }
msg_mnt() { echo -e "${G}*${NC} $@" "${G}[${NC} Mounted${G} ]${NC}"; }
msg_mnt_rt() { echo -e "${G}*${NC} $@" "${G}[${NC} Runtime${G} ]${NC}"; }
msg_umnt() { echo -e "${R}*${NC} $@" "${R}[${NC}Unmounted${R}]${NC}"; }

storeenv() {
    echo "$DBUS_SESSION_BUS_ADDRESS" > /tmp/archroot_dbus_session_address
    echo "$XDG_RUNTIME_DIR" > /tmp/archroot_xdg_runtime_dir
}

help_text() {
cat << EOF
USAGE: archroot <OPTIONS>

OPTIONS:
  -c, --create URL      Creates a chroot environment.
  -m, --mount           Mount chroot API filesystems.
  -u, --unmount         Unmount chroot API filesystems.
  -r, --remount-run     Remount /run to chroot environment.
      --runtime-only    Mount $XDG_RUNTIME_DIR to chroot environment.
  -s, --status          Check mounted chroot API filesystems.
  -e, --enter           Enters chroot environment.
  -h, --help            Displays this help message.

Install Arch Linux inside chroot environment using same user environment
https://github.com/owl4ce/archroot
EOF
}

chk_apifs() {
    if mount | grep " $CHROOT/dev " &> /dev/null; then
        msg_mnt "$CHROOT/dev"
    else
        msg_umnt "$CHROOT/dev"
    fi
    if mount | grep " $CHROOT/home " &> /dev/null; then
        msg_mnt "$CHROOT/home"
    else
        msg_umnt "$CHROOT/home"
    fi
    if mount | grep " $CHROOT/usr/lib/modules " &> /dev/null; then
        msg_mnt "$CHROOT/lib/modules"
    else
        msg_umnt "$CHROOT/lib/modules"
    fi
    if mount | grep " $CHROOT/proc " &> /dev/null; then
        msg_mnt "$CHROOT/proc"
    else
        msg_umnt "$CHROOT/proc"
    fi
    if mount | grep " $CHROOT/run " &> /dev/null; then
        msg_mnt "$CHROOT/run"
    else
        if mount | grep " $CHROOT$(cat /tmp/archroot_xdg_runtime_dir 2> /dev/null) " &> /dev/null; then
            msg_mnt_rt "$CHROOT$(cat /tmp/archroot_xdg_runtime_dir 2> /dev/null)"
        else
            msg_umnt "$CHROOT/run"
        fi
    fi
    if mount | grep " $CHROOT/sys " &> /dev/null; then
        msg_mnt "$CHROOT/sys"
    else
        msg_umnt "$CHROOT/sys"
    fi
    if mount | grep " $CHROOT/tmp " &> /dev/null; then
        msg_mnt "$CHROOT/tmp"
    else
        msg_umnt "$CHROOT/tmp"
    fi
    if mount | grep " $CHROOT/var/lib/dbus " &> /dev/null; then
        msg_mnt "$CHROOT/var/lib/dbus"
    else
        msg_umnt "$CHROOT/var/lib/dbus"
    fi
}

mnt_apifs() {
    $mount $Rvar /dev $CHROOT/dev
    $mount --make-rslave $CHROOT/dev
    $mount $Rvar /home $CHROOT/home
    $mount $Rvar /lib/modules $CHROOT/lib/modules
    $mount $Tvar proc /proc $CHROOT/proc
    [[ $MOUNT_RUN = "yes" ]] && $mount $Rvar /run $CHROOT/run
    $mount $Rvar /sys $CHROOT/sys
    $mount --make-rslave $CHROOT/sys
    $mount $Rvar /tmp $CHROOT/tmp
    $mount $Rvar /var/lib/dbus $CHROOT/var/lib/dbus
}

umnt_apifs() {
    $umount $Rvar $CHROOT/dev
    $umount $Rvar $CHROOT/home
    $umount $Rvar $CHROOT/lib/modules
    $umount $Rvar $CHROOT/proc
    if mount | grep "$CHROOT$(cat /tmp/archroot_xdg_runtime_dir 2> /dev/null)" &> /dev/null; then
        $umount $Rvar $CHROOT$(cat /tmp/archroot_xdg_runtime_dir 2> /dev/null)
    fi
    if mount | grep "$CHROOT/run" &> /dev/null; then
        $umount $Rvar $CHROOT/run
    fi
    $umount $Rvar $CHROOT/sys
    $umount $Rvar $CHROOT/tmp
    $umount $Rvar $CHROOT/var/lib/dbus
}

redirx() { checkdep xhost && xhost +local: &> /dev/null; }

storeenv

case $1 in
    -c|--create)
        asroot
        if mount | grep -E "$CHROOT/dev|$CHROOT/home|$CHROOT/usr/lib/modules|$CHROOT/proc|$CHROOT/run|$CHROOT/sys|$CHROOT/tmp|$CHROOT/var/lib/dbus" &> /dev/null; then
            archroot -s
            msg "Please unmount chroot API filesystems first to continue installing!"
            err "Exiting... to anticipate damaged host system!"
        fi
        if [[ ! -f "$INSTALL_PATH/root.x86_64/etc/archroot" ]]; then
            [[ -z "$2" ]] && err "Specify the URL of Arch Linux bootstrap tarball!"
            cd "$INSTALL_PATH"
            msg "Downloading Arch Linux tarball..."
            [[ ! -f "./archlinux.tar.gz" ]] && checkdep curl && \
            if [[ "$(command -v "wget" 2> /dev/null)" ]]; then
                wget -q --show-progress -O archlinux.tar.gz $2
            elif [[ "$(command -v "curl" 2> /dev/null)" ]]; then
                curl -L "$2" -o archlinux.tar.gz
            else
                err "There's no ${M}wget${W} or ${M}curl${W} installed."
            fi
            [[ -f "./archlinux.tar.gz" ]] && msg "Arch Linux tarball downloaded"
            msg "Extracting the tarball..."
            tar xzf archlinux.tar.gz 2> /dev/null
            msg "Enabling internet connection in chroot environment..."
            cp /etc/resolv.conf $CHROOT/etc/resolv.conf
            msg "You will need to edit which mirror you want to use, uncomment needed mirrors and save it!"
            echo -n "Editor of your choice (e.g: nano): "
            read "TEXT_EDITOR"
            checkdep "$TEXT_EDITOR"
            $TEXT_EDITOR $CHROOT/etc/pacman.d/mirrorlist || exit 1
            msg "Disabling Pacman's CheckSpace..."
            checkdep "sed"
            sed -i 's_CheckSpace_#CheckSpace_' $CHROOT/etc/pacman.conf
            msg "Mounting chroot API filesystems..."
            mkdir -p "$CHROOT/lib/modules"
            mkdir -p "$CHROOT/var/lib/dbus"
            mnt_apifs
            archroot -s 2> /dev/null
            echo "$USER" > /tmp/archroot_localuser
            cp $INSTALL_PATH/archsetup $CHROOT/archsetup
            cp /etc/machine-id $CHROOT/etc/machine-id
            chroot $CHROOT /bin/bash -c "./archsetup"
            msg "Arch Linux installation was successful"
        else
            err "Arch Linux already installed in $INSTALL_PATH/root.x86_64"
        fi
        rm -f /tmp/archroot* &> /dev/null
    ;;
    -m|--mount)
        if mount | grep -E "$CHROOT/dev|$CHROOT/home|$CHROOT/usr/lib/modules|$CHROOT/proc|$CHROOT/run|$CHROOT/sys|$CHROOT/tmp|$CHROOT/var/lib/dbus" &> /dev/null; then
            archroot -s 2> /dev/null
        else
            gr_msg "Mounting..."
            mnt_apifs
            archroot -s 2> /dev/null
        fi
    ;;
    -u|--unmount)
        if mount | grep -E "$CHROOT/dev|$CHROOT/home|$CHROOT/usr/lib/modules|$CHROOT/proc|$CHROOT/run|$CHROOT/sys|$CHROOT/tmp|$CHROOT/var/lib/dbus" &> /dev/null; then
            gr_msg "Unmounting..."
            umnt_apifs
            archroot -s 2> /dev/null
            gr_msg "If failed to unmount simply try again or reboot host system!"
        else
            archroot -s 2> /dev/null
        fi
    ;;
    -r|--remount-run)
        if mount | grep -E "$CHROOT/dev|$CHROOT/home|$CHROOT/usr/lib/modules|$CHROOT/proc|$CHROOT/run|$CHROOT/sys|$CHROOT/tmp|$CHROOT/var/lib/dbus" &> /dev/null; then
            if mount | grep " $CHROOT/run " &> /dev/null; then                
                gr_msg "Remounting /run ..."
                $umount $Lvar $CHROOT/run
                $mount $Rvar /run $CHROOT/run 2> /dev/null
                archroot -s 2> /dev/null
                gr_msg "/run remounted successfuly"
            else
                archroot -s 2> /dev/null
                rd_msg "Failed to remount /run"
            fi
        else
            archroot -s 2> /dev/null
            gr_msg "Please mount chroot API filesystems before remount /run !"
            rd_msg "Failed to remount /run"
        fi
    ;;
    --runtime-only)
        if mount | grep -E "$CHROOT/dev|$CHROOT/home|$CHROOT/usr/lib/modules|$CHROOT/proc|$CHROOT/run|$CHROOT/sys|$CHROOT/tmp|$CHROOT/var/lib/dbus" &> /dev/null; then
            archroot -s 2> /dev/null
            gr_msg "Mounting $XDG_RUNTIME_DIR only..."
            [[ ! -e "$CHROOT$(cat /tmp/archroot_xdg_runtime_dir 2> /dev/null)" ]] && \
            $PRIV mkdir -p $CHROOT$(cat /tmp/archroot_xdg_runtime_dir 2> /dev/null)
            $umount $Rvar $CHROOT/run 2> /dev/null
            $umount $Lvar $CHROOT$(cat /tmp/archroot_xdg_runtime_dir 2> /dev/null) 2> /dev/null
            $mount $Rvar $(cat /tmp/archroot_xdg_runtime_dir 2> /dev/null) $CHROOT$(cat /tmp/archroot_xdg_runtime_dir 2> /dev/null)
            archroot -s 2> /dev/null
        else
            archroot -s 2> /dev/null
            gr_msg "Please mount chroot API filesystems before mounting $XDG_RUNTIME_DIR only!"
            rd_msg "Failed to mount $XDG_RUNTIME_DIR"
        fi
    ;;
    -s|--status)
        gr_msg "Checking mounted chroot API filesystems..."
        chk_apifs | column -t
        if mount | grep -E "$CHROOT/dev|$CHROOT/home|$CHROOT/usr/lib/modules|$CHROOT/proc|$CHROOT/run|$CHROOT/sys|$CHROOT/tmp|$CHROOT/var/lib/dbus" &> /dev/null; then
            gr_msg "Mounted"
        else
            rd_msg "Unmounted"
        fi
        [[ $MOUNT_RUN != "yes" ]] && rd_msg "/run recursive mount option is disabled in /etc/archroot.conf" || :
    ;;
    -e|--enter)
        if mount | grep -E "$CHROOT/dev|$CHROOT/home|$CHROOT/usr/lib/modules|$CHROOT/proc|$CHROOT/run|$CHROOT/sys|$CHROOT/tmp|$CHROOT/var/lib/dbus" &> /dev/null; then
            redirx
            $PRIV $INSTALL_PATH/copyresolv
            $PRIV $INSTALL_PATH/command enter
        else
            archroot -s 2> /dev/null
            gr_msg "Please mount chroot API filesystems before entering chroot environment!"
        fi
	;;
    -h|--help|"")
        help_text
    ;;
    -*) err "Unknown option $1"
    ;;
    *)  redirx
        $PRIV $INSTALL_PATH/copyresolv
        COMMAND="$(echo $@ | tr ' ' '\ ')"
        $PRIV $INSTALL_PATH/command $COMMAND
    ;;
esac
